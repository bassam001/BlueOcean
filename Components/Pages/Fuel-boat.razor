@page "/fuel-boat"
@inject TraderApiClient ApiClient
@inject IJSRuntime JSRuntime

<h3>Fuel a Boat</h3>

@if (myBoats != null && myBoats.Count > 0)
{
    <div class="form-group">
        <label for="boatSelect">Select Boat</label>
        <select class="form-control" id="boatSelect" @onchange="OnBoatSelected">
            <option value="">-- Select a Boat --</option>
            @foreach (var boat in myBoats)
            {
                <option value="@boat.Id.ToString()">@boat.Id ?? "Unnamed Boat" (Current Fuel: @boat.CurrentFuel)</option>
            }
        </select>
    </div>

    @if (selectedBoat != null)
    {
        <div class="mt-3">
            <h4>Boat Status</h4>
            <p><strong>Boat ID:</strong> @selectedBoat.Id</p>
            <p><strong>Current Fuel:</strong> @selectedBoat.CurrentFuel</p>
            <p><strong>Max Fuel Capacity:</strong> @selectedBoat.MaxFuel</p>
            <p><strong>Current Position:</strong> @selectedBoat.CurrentPosition</p>
            <p><strong>World Location:</strong> @selectedBoat.WorldLocation</p>
        </div>

        <div class="form-group mt-3">
            <label for="fuelAmount">Fuel Amount</label>
            <input type="number" class="form-control" id="fuelAmount" @bind="fuelAmount" placeholder="Enter Amount" min="1" max="@MaxFuelAllowed" />
            <small class="form-text text-muted">Max allowed: @MaxFuelAllowed</small>
        </div>

        <button class="btn btn-primary" @onclick="ConfirmFueling">Fuel Boat</button>
    }

    @if (fuelResult != null)
    {
        <div class="alert alert-success mt-3">
            Boat fueled successfully. New Fuel Level: @fuelResult
        </div>
    }
}
else
{
    <p>No boats available to fuel.</p>
}

@code {
    private List<GameBoat> myBoats;
    private Guid? selectedBoatId;
    private GameBoat selectedBoat;
    private int fuelAmount;
    private double? fuelResult;

    protected override async Task OnInitializedAsync()
    {
        await LoadMyBoats();
    }

    private async Task LoadMyBoats()
    {
        try
        {
            var boats = await ApiClient.GetAvailableBoatsAsync();
            var playerId = await GetCurrentPlayerIdAsync(); 
            myBoats = boats.Where(b => b.OwningPlayerId == playerId).ToList();
        }
        catch (Exception ex)
        {
            ApiClient.ShowErrorMessage($"Error loading boats: {ex.Message}");
        }
    }

    private async Task<Guid> GetCurrentPlayerIdAsync()
    { //later
        return Guid.Empty;
    }

    private async Task OnBoatSelected(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var guid))
        {
            selectedBoatId = guid;
            selectedBoat = myBoats.FirstOrDefault(b => b.Id == selectedBoatId);
        }
        else
        {
            selectedBoatId = null;
            selectedBoat = null;
        }

        StateHasChanged();
    }

    private int MaxFuelAllowed => selectedBoat != null ? selectedBoat.MaxFuel - selectedBoat.CurrentFuel : 0;

    private async Task ConfirmFueling()
    {
        if (selectedBoat != null && fuelAmount > 0)
        {
            if (fuelAmount > MaxFuelAllowed)
            {
                fuelAmount = MaxFuelAllowed;
            }

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to fuel {fuelAmount} units for the boat at {selectedBoat.WorldLocation ?? "Unnamed Boat"}?");
            if (confirmed)
            {
                await FuelBoat();
            }
        }
    }

    private async Task FuelBoat()
    {
        try
        {
            fuelResult = await ApiClient.FuelBoatAsync(selectedBoat.Id.ToString(), fuelAmount);

            await LoadMyBoats();
            selectedBoat = myBoats.FirstOrDefault(b => b.Id == selectedBoatId); 
        }
        catch (Exception ex)
        {
            ApiClient.ShowErrorMessage($"Error fueling boat: {ex.Message}");
        }
    }
}
